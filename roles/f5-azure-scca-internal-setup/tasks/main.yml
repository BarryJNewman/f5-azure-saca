---
# tasks file for f5-azure-scca-internal-setup
- name: Provision modules
  bigip_provision:
    server: "{{item.server}}"    
    user: "{{f5_username}}"
    password: "{{f5_password}}"
    module: "{{item.module}}"
    level: "{{item.level}}"
  with_items:
     "{{setup.modules}}"

- name: Check commands
  bigip_command:
    server: "{{item.server}}"
    user: "{{f5_username}}"
    password: "{{f5_password}}"
    commands:
       - "{{item.check}}"
  with_items:
    "{{setup.commands}}"
  register: result
- name: Run commands
  bigip_command:
    server: "{{item.item.server}}"
    user: "{{f5_username}}"
    password: "{{f5_password}}"
    commands:
      - "{{item.item.command}}"
  with_items:
    "{{result.results}}"
  when: 
    - '"was not found" in item.stdout|first'


- name: Add Routes
  bigip_static_route:
    destination: "{{item.destination}}"
    gateway_address: "{{item.gateway_address}}"
    name: "{{item.name}}"
    server: "{{item.server}}"
    user: "{{f5_username}}"
    password: "{{f5_password}}"
  with_items:
     "{{setup.routes}}"

# - name: debug output
#   debug:
#     msg: "{{setup}}"

- name: add float self
  bigip_selfip:
    address: "{{item.address}}"
    name: "{{item.name}}"
    netmask: "{{item.netmask}}"
    vlan: "{{item.vlan}}"
    traffic_group: "{{item.traffic_group}}"
    server: "{{item.server}}"
    password: "{{f5_password}}"
    user: "{{f5_username}}"

  with_items:
    "{{setup.selfips}}"

- name: Add Pools
  bigip_pool:
    name: "{{item.name}}"
    server: "{{item.server}}"
    user: "{{f5_username}}"
    password: "{{f5_password}}"
  with_items:
     "{{setup.pools}}"

- name: Add Pool Members
  bigip_pool_member:
    name: "{{item.name}}"
    server: "{{item.server}}"
    user: "{{f5_username}}"
    password: "{{f5_password}}"
    pool: "{{item.pool}}"
    host: "{{item.host}}"
    port: "{{item.port}}"
    name: "{{item.name}}"
  with_items:
     "{{setup.pool_members}}"
- name: Check virtuals
  bigip_command:
    server: "{{item.server}}"
    user: "{{f5_username}}"
    password: "{{f5_password}}"
    commands:
      - tmsh show ltm virtual {{item.name}}
  with_items:
    "{{setup.virtuals}}"
  register: result

- name: Create Virtuals
  bigip_command:
    server: "{{item.item.server}}"
    user: "{{f5_username}}"
    password: "{{f5_password}}"
    commands:
      - tmsh {{item.item.command}}
  with_items:
    "{{result.results}}"
  when: 
    - '"was not found" in item.stdout|first'

- name: Check Route tags f5_ha
  command: az network route-table show --resource-group "{{item.resource_group}}" --name "{{item.name}}" --query tags.f5_ha
  with_items:
    "{{setup.route_tables}}"
  register: result

- name: Update Route tags f5_ha
  command: az network route-table update --resource-group "{{item.item.resource_group}}" --name "{{item.item.name}}" --set tags.f5_ha={{item.item.f5_ha}}
  with_items:
    "{{result.results}}"
  when: 
    - 'item.item.f5_ha != item.stdout[1:-1]'

- name: Check Route tags f5_self
  command: az network route-table show --resource-group "{{item.resource_group}}" --name "{{item.name}}" --query tags.f5_self
  with_items:
    "{{setup.route_tables}}"
  when:
    - '"f5_self" in item'
  register: result

- name: Update Route tags f5_self
  command: az network route-table update --resource-group "{{item.item.resource_group}}" --name "{{item.item.name}}" --set tags.f5_self={{item.item.f5_self}}
  with_items:
    "{{result.results}}"
  when: 
    - '"f5_self" in item.item and item.item.f5_self != item.stdout[1:-1]'

- name: Check Route tags f5_tg
  command: az network route-table show --resource-group "{{item.resource_group}}" --name "{{item.name}}" --query tags.f5_tg
  with_items:
    "{{setup.route_tables}}"
  register: result

- name: Update Route tags f5_tg
  command: az network route-table update --resource-group "{{item.item.resource_group}}" --name "{{item.item.name}}" --set tags.f5_tg={{item.item.f5_tg}}
  with_items:
    "{{result.results}}"
  when: 
    - 'item.item.f5_tg != item.stdout[1:-1]'

# - name: Check local commands
#   command:
#     commands:
#        - "{{item.check}}"
#   with_items:
#     "{{setup.commands}}"
#   register: result
- name: Run local commands 
  command: "{{item.command}}"
  with_items:
    "{{setup.localcommands}}"
