{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "4.3.0.0",
  "parameters": {
    "dnsLabel": {
      "defaultValue": "f5",
      "metadata": {
        "description": "Unique DNS Name for the Public IP address used to access the Virtual Machine."
      },
      "type": "string"
    },
    "numberOfExternalIps": {
      "allowedValues": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20
      ],
      "defaultValue": 2,
      "metadata": {
        "description": "The number of public/private IP addresses you want to deploy for the application traffic (external) NIC on the BIG-IP VE to be used for virtual servers."
      },
      "type": "int"
    },
    "vnetName": {
      "defaultValue": "VDSS_VNet",
      "metadata": {
        "description": "The name of the existing virtual network to which you want to connect the BIG-IP VEs."
      },
      "type": "string"
    },
    "vnetResourceGroupName": {
      "metadata": {
        "description": "The name of the resource group that contains the Virtual Network where the BIG-IP VE will be placed."
      },
      "type": "string"
    },
    "externalSubnetName": {
      "defaultValue": "F5_Ext_Untrusted_Subnet",
      "metadata": {
        "description": "Name of the existing external subnet - with external access to Internet."
      },
      "type": "string"
    },
    "internalSubnetName": {
      "defaultValue": "F5_Int_Untrusted_Subnet",
      "metadata": {
        "description": "Name of the existing internal subnet."
      },
      "type": "string"
    },
    "internalIpAddressRangeStart": {
      "defaultValue": "192.168.4.3",
      "metadata": {
        "description": "The static private IP address you would like to assign to the internal self IP of the first BIG-IP VE. The next contiguous address will be used for the second BIG-IP device."
      },
      "type": "string"
    },
    "internalLoadBalancerType": {
      "allowedValues": [
        "Per-protocol",
        "All-protocol",
        "DO_NOT_USE"
      ],
      "defaultValue": "Per-protocol",
      "metadata": {
        "description": "Specify a the type of internal Azure load balancer to deploy. Note: As of the initial release of this template, the all-protocol Azure load balancer is in public preview. Please ensure that this feature is enabled before selecting **All-protocol**."
      },
      "type": "string"
    },
    "internalLoadBalancerProbePort": {
      "defaultValue": "3456",
      "metadata": {
        "description": "Specify a TCP port for the internal load balancer to monitor. If you specified DO_NOT_USE for internal load balancer type, this setting has no effect."
      },
      "type": "string"
    }
  },
  "variables": {
    "apiVersion": "2015-06-15",
    "computeApiVersion": "2015-06-15",
    "networkApiVersion": "2016-03-30",
    "storageApiVersion": "2015-06-15",
    "insightsApiVersion": "2015-04-01",
    "location": "[resourceGroup().location]",
    "subscriptionID": "[subscription().subscriptionId]",
    "resourceGroupName": "[resourceGroup().name]",
    "singleQuote": "'",
    "dnsLabel": "[toLower(parameters('dnsLabel'))]",
    "virtualNetworkName": "[parameters('vnetName')]",
    "vnetId": "[resourceId(parameters('vnetResourceGroupName'),'Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "publicIPAddressType": "Static",
    "extpublicIPAddressNamePrefix": "[concat(variables('dnsLabel'), '-ext-pip')]",
    "extPublicIPAddressIdPrefix": "[resourceId('Microsoft.Network/publicIPAddresses', variables('extPublicIPAddressNamePrefix'))]",
    "extSubnetName": "[parameters('externalSubnetName')]",
    "extSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('extsubnetName'))]",
    "intSubnetName": "[parameters('internalSubnetName')]",
    "intSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('intsubnetName'))]",
    "intSubnetPrivateAddressPrefixArray": "[split(parameters('internalIpAddressRangeStart'), '.')]",
    "intSubnetPrivateAddressPrefix": "[concat(variables('intSubnetPrivateAddressPrefixArray')[0], '.', variables('intSubnetPrivateAddressPrefixArray')[1], '.', variables('intSubnetPrivateAddressPrefixArray')[2], '.')]",
    "intSubnetPrivateAddressSuffixInt": "[int(variables('intSubnetPrivateAddressPrefixArray')[3])]",
    "intSubnetPrivateAddressSuffix": "[add(variables('intSubnetPrivateAddressSuffixInt'), 1)]",
    "intSubnetPrivateAddressSuffix2": "[add(variables('intSubnetPrivateAddressSuffixInt'), 3)]",
    "intSubnetPrivateAddressSuffix3": "[add(variables('intSubnetPrivateAddressSuffixInt'), 4)]",
    "internalLoadBalancerAddress": "[concat(variables('intSubnetPrivateAddressPrefix'), variables('intSubnetPrivateAddressSuffix3'))]",
    "extSubnetRef": "[concat('/subscriptions/', variables('subscriptionID'), '/resourceGroups/', parameters('vnetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', parameters('vnetName'), '/subnets/', parameters('externalSubnetName'))]",
    "intSubnetRef": "[concat('/subscriptions/', variables('subscriptionID'), '/resourceGroups/', parameters('vnetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', parameters('vnetName'), '/subnets/', parameters('internalSubnetName'))]",
    "numberOfExternalIps": "[parameters('numberOfExternalIps')]",

    "backEndAddressPoolArray": [
      {
        "id": "[concat(variables('extLbId'), '/backendAddressPools/', 'loadBalancerBackEnd')]"
      },
      {
        "id": "[concat(variables('intLbId'), '/backendAddressPools/', 'loadBalancerBackEnd')]"
      }
    ],

    "externalLoadBalancerName": "[concat(variables('dnsLabel'),'-ext-alb')]",
    "extLbId": "[resourceId('Microsoft.Network/loadBalancers',variables('externalLoadBalancerName'))]",
    "internalLoadBalancerName": "[concat(variables('dnsLabel'),'-int-ilb')]",
    "intLbId": "[resourceId('Microsoft.Network/loadBalancers',variables('internalLoadBalancerName'))]"
  },
  "resources": [
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "condition": "[not(equals(variables('numberOfExternalIps'),0))]",
      "copy": {
        "count": "[if(not(equals(variables('numberOfExternalIps'), 0)), variables('numberOfExternalIps'), 1)]",
        "name": "extpipcopy"
      },
      "location": "[variables('location')]",
      "name": "[concat(variables('extPublicIPAddressNamePrefix'), copyIndex())]",
      "properties": {
        "idleTimeoutInMinutes": 30,
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
      },

      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "condition": "[not(equals(variables('numberOfExternalIps'),0))]",
      "dependsOn": [
        "extpipcopy"
      ],
      "location": "[variables('location')]",
      "name": "[variables('externalLoadBalancerName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "loadBalancerBackEnd"
          }
        ],
        "copy": [
          {
            "count": "[if(not(equals(variables('numberOfExternalIps'), 0)), variables('numberOfExternalIps'), 1)]",
            "input": {
              "name": "[concat('loadBalancerFrontEnd', copyIndex('frontendIPConfigurations', 1))]",
              "properties": {
                "publicIPAddress": {
                  "id": "[concat(variables('extPublicIPAddressIdPrefix'), sub(copyIndex('frontendIPConfigurations', 1), 1))]"
                }
              }
            },
            "name": "frontendIPConfigurations"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "http_vs",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd2')]"
              },
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 15,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/probes/is_alive')]"
              }
            }
          },
          {
            "name": "rdp_gw_vs",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd1')]"
              },
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 15,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/probes/is_alive')]"
              }
            }
          },
          {
            "name": "rdp_vs",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd1')]"
              },
              "frontendPort": 3389,
              "backendPort": 3389,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 15,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/probes/is_alive')]"
              }
            }
          },
          {
            "name": "ssh_vs",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd1')]"
              },
              "frontendPort": 22,
              "backendPort": 22,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 15,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/probes/is_alive')]"
              }
            }
          },
          {
            "name": "ssl_not_visible_vs",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd2')]"
              },
              "frontendPort": 8443,
              "backendPort": 8443,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 15,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/probes/is_alive')]"
              }
            }
          },
          {
            "name": "ssl_visible_vs",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd2')]"
              },
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 15,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/probes/is_alive')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "is_alive",
            "properties": {
              "protocol": "Http",
              "port": 80,
              "requestPath": "/",
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            }
          }
        ]
      },


      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "condition": "[not(equals(parameters('internalLoadBalancerType'),'DO_NOT_USE'))]",
      "dependsOn": [
        "extpipcopy"
      ],
      "location": "[variables('location')]",
      "name": "[variables('internalLoadBalancerName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "LoadBalancerBackEnd"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd1",
            "properties": {
              "privateIPAddress": "[parameters('internalIpAddressRangeStart')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('intSubnetId')]"
              }
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "http_vs",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd1')]"
              },
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 15,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLoadBalancerName')), '/probes/is_alive')]"
              }
            }
          }
   
        ],
        "probes": [
          {
            "name": "is_alive",
            "properties": {
              "protocol": "Http",
              "port": 80,
              "requestPath": "/",
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            }
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    }
  ],
  "outputs": {

  }
}
